sass:
  supserset of css
  uses nesting
  uses variables
    eg $primary-color: #a236ff
    header {
      h1 {
        background $primary-color;
      }
    }
  mix-ins: group of declarations that can be reused:
    @mixin verticalCenter {
      position: relative;
      top: 50%;
      transform: translateY(-50%)
    }

    h1, h2, h3 {
      @include verticalCenter;
    }
  partials: filenames precursed by underscores eg _variables.scss
  then in main scss use @import 'variables';

  extends: use @extend 'css object name' eg
  .message {
    border: 1px solid green;
    padding: 10px;
  }

  .success{
    @extend .message
    background-color: green;
  }

in css, set the height of the html to 100% and set the min-height of the body to 100%
--> in sass, this can be a mixin
  @include full-height {
    height: 100%;

    body {
      min-height: 100%;
      }
    }
For scss that doesn't use a space in the object reference in css (ie a:link, a:focus, etc), where sass usually puts a space in nesting:
  put an ampersand before:
  eg

  a {
    &:link {
      $link-color;
    }
  }

FOR EACH:
  Array.forEach((n) => return n*n)
  This maps the array Array through a square function

const odds = numbers.filter((n) = > {
  return n % 2 === 1
}

const sum = numbers.reduce((t, n) => {
  return t + n
}) /// n is the first value in the array numbers, t is the initial value that then gets looped back in (t=0 w/o specifying init value)

const firstOdd = numbers.find((n) => {
  numbers % 2 === 1
})
filter is the first value in the array generated by the same function passed to filter

3.29
Maps:
  to double every element of an array:

  function double(arr){
  return arr.map((a) => {
    return a * 2
  })
}

const double = arr => arr.map(n => n * 2)


reduce: const grow = (arr) => arr.reduce((t, n) => t * n)

JSON -- Javascript object notation

let obj - {name: 'Colin', age: 26}
obj.name = colin
JSON.stringify(obj) = string
JSON.parse(JSON.stringify(obj)) = original object

Then we can do
localStorage.setItem('reference', JSON.stringify(obj))
and
JSON.parse(localStorage.getItem('reference'))


3.30 -- Modal boxes
div called overlay, internal div called dialog
then in scss:
.overlay {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background-color: hsla(0, 0%, 0%, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
}

.dialog {
  display: flex;
  flex-direction: column;
  justify-content: center;
}

Then make a class called hidden that does not display it

.hidden {
  display: none;
}

and put this class into the overlay div
To blur behind the modal window:
Wrap rest of document in a main tag and use

body:not(.modal) .overlay {
  display: none;
}
body.modal main {
  filter: blur(5px);
}
Then use the js to toggle the modal class on and off the body

to do relative times:
webpack will handle any libraries we add as a dependency from yarn through npm
add the library from yarn add $library
then import $variableName from '$library' in my js

You can take general functions and put them into $another js file. export the default as $functionName from $another file, then reference that with import $functionName
For $another filepath, js assumes that it is in the node file

---Node list---
Add Lodash 'yarn add lodash'
