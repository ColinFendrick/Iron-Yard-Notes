Websockets - maintain an open connection instead of smaller requests over time
We can use Pusher to use websockets
Firebase is google's version of this real-time websockets
We can use a client library to respond to changes to firebase and updating the firebase api

We can use the apientry and databaseURL of firebase
On their docs, find read and write data in realtime database
db.ref('items').on('value', snapshot => {
  /do stuff with snapshot/
})

You will also need to update security rules on the firebase page to let anyone read or write data
This data is always an object, though, so you must map over it. It's possible to use
Object.keys(/whatever/).map(keys => {do stuff with keys here})
but that sucks, so just use lodash.
_.map(/object to loop/, callback(value from object, keys of object) =>{/do stuff with values and keys})

We can get a reference to 'items' with a specific id:

make a db file in our main src:
import * as firebase from 'firebase'
const app = firebase.initializeApp({
  apikey: /whatever/
  atabaseURL: /url/
})

export default app.database()

in our main file, import db from '../db'

on the firebase website, use their information and our object values to call this data:
db.ref('items').on('value', (snapshot) => {
  /do stuff with snapshot/
})

To write to the db:
db.ref('items').push().set({
  /example key/: 'our text',
  /example key/: false
})

_toggle = id => {
  db.ref(`items/${id}`).update({ completed: !this.state.items[id].completed })
}

_delete = id => {
  db.ref(`items/${id}`).remove()
}


AUTH0:
yarn add auth0-lock
create a new js file called auth.js with a singleton class of Auth
import Auth0Lock from 'auth0-lock'

class Auth {
  @observable token
  constructor () {
    this.token = window.localStorage.getItem('auth:token')
    this.lock = new Auth0Lock(CLIENT_ID, CLIENT_DOMAIN)
    this.lock.on('authenticated', ({ idToken }) => {
      this.token = idToken
    })
  }

  signIn () {
    this.lock.show()
  }

  signOut () {
    this.token = null
  }

  @computed get isSignedIn () {
    return this.token
  }
}

We import that auth into our main app as an if-then ternary for routing:
  {auth.isSignedIn ? <List /> : <Home />} to render something depending on isSignedIn

We create an app on Auth0 and get our client id and client domain and whitelist localhost for allowed urls on auth0
We use signIn to show the lock screen
In the constructor, we use on('authenticated') to create an event handler
In our isSignedIn, we can return this.token which is true when an idToken is provided (from this.lock) and false otherwise, thus rendering
our false return

//jwt.io can take our idToken and decode it into public info//
We can use the api work to then query the api only on signin, and pass the token to the url to pull our api data on that token

To store a token on login, we use autorun function inside of our constructor, which mobx will change, and we make isSignedIn computed so that
observers that don't directly observe token will rerender when isSignedIn gets called again
We put this.token = window.localStorage.getItem('auth:token') before in our constructor so it will find a token if we are already
signed in.
